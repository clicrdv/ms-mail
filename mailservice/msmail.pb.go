// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msmail.proto

/*
Package mailservice is a generated protocol buffer package.

It is generated from these files:
	msmail.proto

It has these top-level messages:
	ClicRdvMail
	SendMailStatus
*/
package mailservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClicRdvMail struct {
	FromName     string            `protobuf:"bytes,1,opt,name=fromName" json:"fromName,omitempty"`
	FromEmail    string            `protobuf:"bytes,2,opt,name=fromEmail" json:"fromEmail,omitempty"`
	ReplyToName  string            `protobuf:"bytes,3,opt,name=replyToName" json:"replyToName,omitempty"`
	ReplyToEmail string            `protobuf:"bytes,4,opt,name=replyToEmail" json:"replyToEmail,omitempty"`
	HtmlContent  string            `protobuf:"bytes,5,opt,name=htmlContent" json:"htmlContent,omitempty"`
	TextContent  string            `protobuf:"bytes,6,opt,name=textContent" json:"textContent,omitempty"`
	Subject      string            `protobuf:"bytes,7,opt,name=subject" json:"subject,omitempty"`
	ToMap        map[string]string `protobuf:"bytes,8,rep,name=toMap" json:"toMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ClicRdvMail) Reset()                    { *m = ClicRdvMail{} }
func (m *ClicRdvMail) String() string            { return proto.CompactTextString(m) }
func (*ClicRdvMail) ProtoMessage()               {}
func (*ClicRdvMail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClicRdvMail) GetFromName() string {
	if m != nil {
		return m.FromName
	}
	return ""
}

func (m *ClicRdvMail) GetFromEmail() string {
	if m != nil {
		return m.FromEmail
	}
	return ""
}

func (m *ClicRdvMail) GetReplyToName() string {
	if m != nil {
		return m.ReplyToName
	}
	return ""
}

func (m *ClicRdvMail) GetReplyToEmail() string {
	if m != nil {
		return m.ReplyToEmail
	}
	return ""
}

func (m *ClicRdvMail) GetHtmlContent() string {
	if m != nil {
		return m.HtmlContent
	}
	return ""
}

func (m *ClicRdvMail) GetTextContent() string {
	if m != nil {
		return m.TextContent
	}
	return ""
}

func (m *ClicRdvMail) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ClicRdvMail) GetToMap() map[string]string {
	if m != nil {
		return m.ToMap
	}
	return nil
}

type SendMailStatus struct {
	Status   string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	UniqueId string `protobuf:"bytes,2,opt,name=uniqueId" json:"uniqueId,omitempty"`
}

func (m *SendMailStatus) Reset()                    { *m = SendMailStatus{} }
func (m *SendMailStatus) String() string            { return proto.CompactTextString(m) }
func (*SendMailStatus) ProtoMessage()               {}
func (*SendMailStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SendMailStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *SendMailStatus) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func init() {
	proto.RegisterType((*ClicRdvMail)(nil), "mailservice.ClicRdvMail")
	proto.RegisterType((*SendMailStatus)(nil), "mailservice.SendMailStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClicRdvMailService service

type ClicRdvMailServiceClient interface {
	SendMail(ctx context.Context, in *ClicRdvMail, opts ...grpc.CallOption) (*SendMailStatus, error)
}

type clicRdvMailServiceClient struct {
	cc *grpc.ClientConn
}

func NewClicRdvMailServiceClient(cc *grpc.ClientConn) ClicRdvMailServiceClient {
	return &clicRdvMailServiceClient{cc}
}

func (c *clicRdvMailServiceClient) SendMail(ctx context.Context, in *ClicRdvMail, opts ...grpc.CallOption) (*SendMailStatus, error) {
	out := new(SendMailStatus)
	err := grpc.Invoke(ctx, "/mailservice.ClicRdvMailService/SendMail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClicRdvMailService service

type ClicRdvMailServiceServer interface {
	SendMail(context.Context, *ClicRdvMail) (*SendMailStatus, error)
}

func RegisterClicRdvMailServiceServer(s *grpc.Server, srv ClicRdvMailServiceServer) {
	s.RegisterService(&_ClicRdvMailService_serviceDesc, srv)
}

func _ClicRdvMailService_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClicRdvMail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClicRdvMailServiceServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailservice.ClicRdvMailService/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClicRdvMailServiceServer).SendMail(ctx, req.(*ClicRdvMail))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClicRdvMailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mailservice.ClicRdvMailService",
	HandlerType: (*ClicRdvMailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMail",
			Handler:    _ClicRdvMailService_SendMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msmail.proto",
}

func init() { proto.RegisterFile("msmail.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4b, 0x4f, 0xf2, 0x40,
	0x14, 0xfd, 0x0a, 0x1f, 0xaf, 0x5b, 0x62, 0xcc, 0x8d, 0xc1, 0x09, 0xba, 0x20, 0x75, 0xc3, 0xaa,
	0x0b, 0xd8, 0xa0, 0x4b, 0x90, 0x85, 0x0b, 0x0c, 0x01, 0x36, 0x2e, 0x4b, 0x3b, 0xc6, 0xd1, 0x69,
	0x07, 0xdb, 0x69, 0x23, 0xff, 0xd6, 0x9f, 0x62, 0xe6, 0x01, 0x0c, 0x31, 0xee, 0xee, 0x79, 0xdc,
	0xd3, 0xdb, 0x93, 0x81, 0x6e, 0x5a, 0xa4, 0x11, 0xe3, 0xe1, 0x2e, 0x17, 0x52, 0xa0, 0xaf, 0xe6,
	0x82, 0xe6, 0x15, 0x8b, 0x69, 0xf0, 0x5d, 0x03, 0x7f, 0xc6, 0x59, 0xbc, 0x4a, 0xaa, 0x45, 0xc4,
	0x38, 0xf6, 0xa1, 0xfd, 0x9a, 0x8b, 0xf4, 0x39, 0x4a, 0x29, 0xf1, 0x06, 0xde, 0xb0, 0xb3, 0x3a,
	0x62, 0xbc, 0x85, 0x8e, 0x9a, 0xe7, 0x6a, 0x9f, 0xd4, 0xb4, 0x78, 0x22, 0x70, 0x00, 0x7e, 0x4e,
	0x77, 0x7c, 0xbf, 0x11, 0x7a, 0xb9, 0xae, 0x75, 0x97, 0xc2, 0x00, 0xba, 0x16, 0x9a, 0x88, 0xff,
	0xda, 0x72, 0xc6, 0xa9, 0x94, 0x37, 0x99, 0xf2, 0x99, 0xc8, 0x24, 0xcd, 0x24, 0x69, 0x98, 0x14,
	0x87, 0x52, 0x0e, 0x49, 0xbf, 0xe4, 0xc1, 0xd1, 0x34, 0x0e, 0x87, 0x42, 0x02, 0xad, 0xa2, 0xdc,
	0xbe, 0xd3, 0x58, 0x92, 0x96, 0x56, 0x0f, 0x10, 0xef, 0xa1, 0x21, 0xc5, 0x22, 0xda, 0x91, 0xf6,
	0xa0, 0x3e, 0xf4, 0x47, 0x77, 0xa1, 0x53, 0x45, 0xe8, 0xd4, 0x10, 0x6e, 0x94, 0x6b, 0x9e, 0xc9,
	0x7c, 0xbf, 0x32, 0x1b, 0xfd, 0x09, 0xc0, 0x89, 0xc4, 0x4b, 0xa8, 0x7f, 0xd0, 0xbd, 0x6d, 0x48,
	0x8d, 0x78, 0x05, 0x8d, 0x2a, 0xe2, 0x25, 0xb5, 0xc5, 0x18, 0xf0, 0x50, 0x9b, 0x78, 0xc1, 0x23,
	0x5c, 0xac, 0x69, 0x96, 0xa8, 0xdc, 0xb5, 0x8c, 0x64, 0x59, 0x60, 0x0f, 0x9a, 0x85, 0x9e, 0x6c,
	0x80, 0x45, 0xaa, 0xfc, 0x32, 0x63, 0x9f, 0x25, 0x7d, 0x4a, 0x6c, 0xcc, 0x11, 0x8f, 0x5e, 0x00,
	0x9d, 0x03, 0xd7, 0xe6, 0x66, 0x9c, 0x41, 0xfb, 0x90, 0x8d, 0xe4, 0xaf, 0xbf, 0xe9, 0xdf, 0x9c,
	0x29, 0xe7, 0xc7, 0x04, 0xff, 0xa6, 0x63, 0xe8, 0xc5, 0x9c, 0xc5, 0x79, 0x52, 0x85, 0x4c, 0xb8,
	0xd6, 0xe9, 0xf5, 0xef, 0x4f, 0x2e, 0xd5, 0x1b, 0x5a, 0x7a, 0xdb, 0xa6, 0x7e, 0x4c, 0xe3, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x05, 0x5e, 0x66, 0x5c, 0x02, 0x00, 0x00,
}
